/**
 * PostPuma - OpenAPI 3.0
 * PostPuma API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@postpuma.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeleteMediaFiles200Response from '../model/DeleteMediaFiles200Response';
import DeleteMediaFilesRequest from '../model/DeleteMediaFilesRequest';
import ListMediaFiles200Response from '../model/ListMediaFiles200Response';
import MediaFile from '../model/MediaFile';

/**
* Media service.
* @module PostPuma/PostPuma/MediaApi
* @version 1.0.0
*/
export default class MediaApi {

    /**
    * Constructs a new MediaApi. 
    * @alias module:PostPuma/PostPuma/MediaApi
    * @class
    * @param {module:PostPuma/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:PostPuma/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteMediaFiles operation.
     * @callback module:PostPuma/PostPuma/MediaApi~deleteMediaFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:PostPuma/model/DeleteMediaFiles200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete media files
     * Delete media files
     * @param {Object} opts Optional parameters
     * @param {module:PostPuma/model/DeleteMediaFilesRequest} [deleteMediaFilesRequest] 
     * @param {module:PostPuma/PostPuma/MediaApi~deleteMediaFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:PostPuma/model/DeleteMediaFiles200Response}
     */
    deleteMediaFiles(opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteMediaFilesRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteMediaFiles200Response;
      return this.apiClient.callApi(
        '/media', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMediaFile operation.
     * @callback module:PostPuma/PostPuma/MediaApi~getMediaFileCallback
     * @param {String} error Error message, if any.
     * @param {module:PostPuma/model/MediaFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get media file
     * Get media file
     * @param {String} mediaUuid Media UUID
     * @param {module:PostPuma/PostPuma/MediaApi~getMediaFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:PostPuma/model/MediaFile}
     */
    getMediaFile(mediaUuid, callback) {
      let postBody = null;
      // verify the required parameter 'mediaUuid' is set
      if (mediaUuid === undefined || mediaUuid === null) {
        throw new Error("Missing the required parameter 'mediaUuid' when calling getMediaFile");
      }

      let pathParams = {
        'mediaUuid': mediaUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MediaFile;
      return this.apiClient.callApi(
        '/media/{mediaUuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMediaFiles operation.
     * @callback module:PostPuma/PostPuma/MediaApi~listMediaFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:PostPuma/model/ListMediaFiles200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List media files
     * List media files
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page number
     * @param {module:PostPuma/PostPuma/MediaApi~listMediaFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:PostPuma/model/ListMediaFiles200Response}
     */
    listMediaFiles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMediaFiles200Response;
      return this.apiClient.callApi(
        '/media', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadMediaFile operation.
     * @callback module:PostPuma/PostPuma/MediaApi~uploadMediaFileCallback
     * @param {String} error Error message, if any.
     * @param {module:PostPuma/model/MediaFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload media file
     * Upload media file
     * @param {Object} opts Optional parameters
     * @param {File} [file] 
     * @param {module:PostPuma/PostPuma/MediaApi~uploadMediaFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:PostPuma/model/MediaFile}
     */
    uploadMediaFile(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = MediaFile;
      return this.apiClient.callApi(
        '/media', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
