/**
 * PostPuma - OpenAPI 3.0
 * PostPuma API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@postpuma.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateTagRequest from '../model/CreateTagRequest';
import DeleteMediaFiles200Response from '../model/DeleteMediaFiles200Response';
import ListTags200Response from '../model/ListTags200Response';
import Tag from '../model/Tag';
import UpdateTagRequest from '../model/UpdateTagRequest';

/**
* Tags service.
* @module PostPuma/PostPuma/TagsApi
* @version 1.0.0
*/
export default class TagsApi {

    /**
    * Constructs a new TagsApi. 
    * @alias module:PostPuma/PostPuma/TagsApi
    * @class
    * @param {module:PostPuma/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:PostPuma/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTag operation.
     * @callback module:PostPuma/PostPuma/TagsApi~createTagCallback
     * @param {String} error Error message, if any.
     * @param {module:PostPuma/model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create tag
     * Create tag
     * @param {Object} opts Optional parameters
     * @param {module:PostPuma/model/CreateTagRequest} [createTagRequest] 
     * @param {module:PostPuma/PostPuma/TagsApi~createTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:PostPuma/model/Tag}
     */
    createTag(opts, callback) {
      opts = opts || {};
      let postBody = opts['createTagRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTag operation.
     * @callback module:PostPuma/PostPuma/TagsApi~deleteTagCallback
     * @param {String} error Error message, if any.
     * @param {module:PostPuma/model/DeleteMediaFiles200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete tag
     * Delete tag
     * @param {String} tagUuid Tag UUID
     * @param {module:PostPuma/PostPuma/TagsApi~deleteTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:PostPuma/model/DeleteMediaFiles200Response}
     */
    deleteTag(tagUuid, callback) {
      let postBody = null;
      // verify the required parameter 'tagUuid' is set
      if (tagUuid === undefined || tagUuid === null) {
        throw new Error("Missing the required parameter 'tagUuid' when calling deleteTag");
      }

      let pathParams = {
        'tagUuid': tagUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteMediaFiles200Response;
      return this.apiClient.callApi(
        '/tags/{tagUuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTag operation.
     * @callback module:PostPuma/PostPuma/TagsApi~getTagCallback
     * @param {String} error Error message, if any.
     * @param {module:PostPuma/model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tag
     * Get tag
     * @param {String} tagUuid Tag UUID
     * @param {module:PostPuma/PostPuma/TagsApi~getTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:PostPuma/model/Tag}
     */
    getTag(tagUuid, callback) {
      let postBody = null;
      // verify the required parameter 'tagUuid' is set
      if (tagUuid === undefined || tagUuid === null) {
        throw new Error("Missing the required parameter 'tagUuid' when calling getTag");
      }

      let pathParams = {
        'tagUuid': tagUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/tags/{tagUuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTags operation.
     * @callback module:PostPuma/PostPuma/TagsApi~listTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:PostPuma/model/ListTags200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List tags
     * List tags
     * @param {module:PostPuma/PostPuma/TagsApi~listTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:PostPuma/model/ListTags200Response}
     */
    listTags(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTags200Response;
      return this.apiClient.callApi(
        '/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTag operation.
     * @callback module:PostPuma/PostPuma/TagsApi~updateTagCallback
     * @param {String} error Error message, if any.
     * @param {module:PostPuma/model/DeleteMediaFiles200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update tag
     * Update tag
     * @param {String} tagUuid Tag UUID
     * @param {Object} opts Optional parameters
     * @param {module:PostPuma/model/UpdateTagRequest} [updateTagRequest] 
     * @param {module:PostPuma/PostPuma/TagsApi~updateTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:PostPuma/model/DeleteMediaFiles200Response}
     */
    updateTag(tagUuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateTagRequest'];
      // verify the required parameter 'tagUuid' is set
      if (tagUuid === undefined || tagUuid === null) {
        throw new Error("Missing the required parameter 'tagUuid' when calling updateTag");
      }

      let pathParams = {
        'tagUuid': tagUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteMediaFiles200Response;
      return this.apiClient.callApi(
        '/tags/{tagUuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
