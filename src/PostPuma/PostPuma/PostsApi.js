/**
 * PostPuma - OpenAPI 3.0
 * PostPuma API specifications
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@postpuma.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreatePostRequest from '../model/CreatePostRequest';
import DeleteMediaFiles200Response from '../model/DeleteMediaFiles200Response';
import DeletePostRequest from '../model/DeletePostRequest';
import DeletePosts200Response from '../model/DeletePosts200Response';
import DeletePostsRequest from '../model/DeletePostsRequest';
import ListPosts200Response from '../model/ListPosts200Response';
import Post from '../model/Post';
import QueuePost200Response from '../model/QueuePost200Response';
import SchedulePostRequest from '../model/SchedulePostRequest';
import UpdatePostRequest from '../model/UpdatePostRequest';

/**
* Posts service.
* @module PostPuma/PostPuma/PostsApi
* @version 1.0.0
*/
export default class PostsApi {

    /**
    * Constructs a new PostsApi. 
    * @alias module:PostPuma/PostPuma/PostsApi
    * @class
    * @param {module:PostPuma/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:PostPuma/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createPost operation.
     * @callback module:PostPuma/PostPuma/PostsApi~createPostCallback
     * @param {String} error Error message, if any.
     * @param {module:PostPuma/model/Post} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create post
     * Create post
     * @param {Object} opts Optional parameters
     * @param {module:PostPuma/model/CreatePostRequest} [createPostRequest] 
     * @param {module:PostPuma/PostPuma/PostsApi~createPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:PostPuma/model/Post}
     */
    createPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['createPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Post;
      return this.apiClient.callApi(
        '/posts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePost operation.
     * @callback module:PostPuma/PostPuma/PostsApi~deletePostCallback
     * @param {String} error Error message, if any.
     * @param {module:PostPuma/model/DeletePosts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete post
     * Delete post
     * @param {String} postUuid Post UUID
     * @param {Object} opts Optional parameters
     * @param {module:PostPuma/model/DeletePostRequest} [deletePostRequest] 
     * @param {module:PostPuma/PostPuma/PostsApi~deletePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:PostPuma/model/DeletePosts200Response}
     */
    deletePost(postUuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['deletePostRequest'];
      // verify the required parameter 'postUuid' is set
      if (postUuid === undefined || postUuid === null) {
        throw new Error("Missing the required parameter 'postUuid' when calling deletePost");
      }

      let pathParams = {
        'postUuid': postUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeletePosts200Response;
      return this.apiClient.callApi(
        '/posts/{postUuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePosts operation.
     * @callback module:PostPuma/PostPuma/PostsApi~deletePostsCallback
     * @param {String} error Error message, if any.
     * @param {module:PostPuma/model/DeletePosts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete posts
     * Delete posts
     * @param {Object} opts Optional parameters
     * @param {module:PostPuma/model/DeletePostsRequest} [deletePostsRequest] 
     * @param {module:PostPuma/PostPuma/PostsApi~deletePostsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:PostPuma/model/DeletePosts200Response}
     */
    deletePosts(opts, callback) {
      opts = opts || {};
      let postBody = opts['deletePostsRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeletePosts200Response;
      return this.apiClient.callApi(
        '/posts', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPost operation.
     * @callback module:PostPuma/PostPuma/PostsApi~getPostCallback
     * @param {String} error Error message, if any.
     * @param {module:PostPuma/model/Post} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get post
     * Get post
     * @param {String} postUuid Post UUID
     * @param {module:PostPuma/PostPuma/PostsApi~getPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:PostPuma/model/Post}
     */
    getPost(postUuid, callback) {
      let postBody = null;
      // verify the required parameter 'postUuid' is set
      if (postUuid === undefined || postUuid === null) {
        throw new Error("Missing the required parameter 'postUuid' when calling getPost");
      }

      let pathParams = {
        'postUuid': postUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Post;
      return this.apiClient.callApi(
        '/posts/{postUuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPosts operation.
     * @callback module:PostPuma/PostPuma/PostsApi~listPostsCallback
     * @param {String} error Error message, if any.
     * @param {module:PostPuma/model/ListPosts200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List posts
     * List posts
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page
     * @param {module:PostPuma/PostPuma/PostsApi~listPostsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:PostPuma/model/ListPosts200Response}
     */
    listPosts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPosts200Response;
      return this.apiClient.callApi(
        '/posts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queuePost operation.
     * @callback module:PostPuma/PostPuma/PostsApi~queuePostCallback
     * @param {String} error Error message, if any.
     * @param {module:PostPuma/model/QueuePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queue post
     * Queue post
     * @param {String} postUuid Post UUID
     * @param {module:PostPuma/PostPuma/PostsApi~queuePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:PostPuma/model/QueuePost200Response}
     */
    queuePost(postUuid, callback) {
      let postBody = null;
      // verify the required parameter 'postUuid' is set
      if (postUuid === undefined || postUuid === null) {
        throw new Error("Missing the required parameter 'postUuid' when calling queuePost");
      }

      let pathParams = {
        'postUuid': postUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QueuePost200Response;
      return this.apiClient.callApi(
        '/posts/add-to-queue/{postUuid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulePost operation.
     * @callback module:PostPuma/PostPuma/PostsApi~schedulePostCallback
     * @param {String} error Error message, if any.
     * @param {module:PostPuma/model/QueuePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Schedule post
     * Schedule post
     * @param {String} postUuid Post UUID
     * @param {Object} opts Optional parameters
     * @param {module:PostPuma/model/SchedulePostRequest} [schedulePostRequest] 
     * @param {module:PostPuma/PostPuma/PostsApi~schedulePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:PostPuma/model/QueuePost200Response}
     */
    schedulePost(postUuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['schedulePostRequest'];
      // verify the required parameter 'postUuid' is set
      if (postUuid === undefined || postUuid === null) {
        throw new Error("Missing the required parameter 'postUuid' when calling schedulePost");
      }

      let pathParams = {
        'postUuid': postUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QueuePost200Response;
      return this.apiClient.callApi(
        '/posts/schedule/{postUuid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePost operation.
     * @callback module:PostPuma/PostPuma/PostsApi~updatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:PostPuma/model/DeleteMediaFiles200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update post
     * Update post
     * @param {String} postUuid Post UUID
     * @param {Object} opts Optional parameters
     * @param {module:PostPuma/model/UpdatePostRequest} [updatePostRequest] 
     * @param {module:PostPuma/PostPuma/PostsApi~updatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:PostPuma/model/DeleteMediaFiles200Response}
     */
    updatePost(postUuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['updatePostRequest'];
      // verify the required parameter 'postUuid' is set
      if (postUuid === undefined || postUuid === null) {
        throw new Error("Missing the required parameter 'postUuid' when calling updatePost");
      }

      let pathParams = {
        'postUuid': postUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteMediaFiles200Response;
      return this.apiClient.callApi(
        '/posts/{postUuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
